

#include <Arduino.h>
#include <SdFat.h>
#include <U8g2lib.h>
#include <TinyGPS++.h>
#include <Bounce2.h>


#define DEBOUNCE 50	//debounce period
#define SD_CS_PIN 5

#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif



//*****************************************************************************
#define bike_delivery_width 128
#define bike_delivery_height 64
static unsigned char bike_delivery_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0xc0, 0xff,
   0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x07,
   0x00, 0x00, 0xc0, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x03, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x80, 0x0f,
   0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x1f,
   0x00, 0x00, 0x80, 0x1f, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xfe, 0x01, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x3f,
   0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x7f,
   0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8,
   0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0xf0, 0x7f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0xfc, 0xfd,
   0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x7f, 0xf8,
   0x01, 0x00, 0x7f, 0xf8, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
   0xff, 0xff, 0x7f, 0xf0, 0x01, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0x01, 0x00,
   0x00, 0xf0, 0xff, 0xff, 0x0f, 0x00, 0xff, 0xe1, 0x03, 0xe0, 0xcf, 0xff,
   0x01, 0xf8, 0x07, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x01, 0x80, 0xff, 0xe7,
   0xff, 0xfb, 0xf3, 0xe7, 0x03, 0xc0, 0x0f, 0x00, 0x00, 0xf8, 0xff, 0x7f,
   0x00, 0xe0, 0xc7, 0xcf, 0xff, 0xff, 0xf8, 0xc1, 0x07, 0x00, 0x3f, 0x00,
   0x00, 0x00, 0x00, 0x3f, 0x00, 0xf0, 0x03, 0xdf, 0xff, 0x3f, 0x7c, 0x80,
   0x07, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0xf8, 0x01, 0xbe,
   0xff, 0x0f, 0x3e, 0x80, 0x0f, 0x00, 0x7c, 0x00, 0x00, 0xff, 0xff, 0x0f,
   0x00, 0x7c, 0x00, 0x3e, 0xff, 0x03, 0x3e, 0x00, 0x1f, 0x00, 0xf8, 0x00,
   0x00, 0xff, 0xff, 0x0f, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x1f, 0x00,
   0x7e, 0x00, 0xf8, 0x00, 0x00, 0xfe, 0xff, 0x0f, 0x80, 0xff, 0xff, 0xff,
   0xff, 0x00, 0x1f, 0x00, 0x7e, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x80, 0x0f,
   0x00, 0x3f, 0x00, 0xfe, 0xff, 0x00, 0x1f, 0x00, 0x38, 0x00, 0xf8, 0x00,
   0x00, 0x00, 0x80, 0x0f, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0x00, 0x3e, 0x00,
   0x00, 0x00, 0xf8, 0x00, 0x00, 0xfc, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x3f,
   0x0f, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xfc, 0xff, 0x3f,
   0x00, 0x00, 0x80, 0x9f, 0x0f, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x3e, 0x00,
   0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xc0, 0xef, 0x1f, 0x00, 0xf8, 0x01,
   0x00, 0x80, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x03, 0x00, 0xf0, 0xc3,
   0x1f, 0x00, 0xf0, 0x07, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0,
   0x1f, 0x00, 0xff, 0x01, 0x00, 0x00, 0xc0, 0x7f, 0x00, 0xfc, 0x03, 0x00,
   0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xff,
   0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00,
   0x00, 0x00, 0x00, 0xf0, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00 };

//*****************************************************************************


TinyGPSPlus gps;

String dataString = "";
// Log file base name.  Must be six characters or less.
#define FILE_BASE_NAME "Data"

// File system object.
SdFat SD;

// Log file.
File myFile;

Bounce bounce0 = Bounce();
Bounce bounce1 = Bounce();

//Schedueler
unsigned long previousMillis = 0;   // using blink without delay.
const long interval = 1000;         // interval in (milliseconds)

//Voltage measurement.
#define NUM_SAMPLES 20
int sum = 0;                    // sum of samples taken
unsigned char sample_count = 0; // current sample number
float voltage = 0.0; 
char BattVolt[30];
float bpercent;           // calculated voltage
char BattPercent[3];

//Pages
uint8_t Page_No = 0;

char SDFree[16];

char GPSTime[9];
char GPSSpeed[4];
float topkph = 0;
char GPSTopSpeed[4];
char GPSLocation[30];
char NumSats[20];
char vartemp[30];

const int ledPin = 12;

U8G2_SSD1309_128X64_NONAME0_1_4W_SW_SPI u8g2(U8G2_R0, /* clock=*/ 13, /* data=*/ 14, /* cs=*/ 22, /* dc=*/ 27, /* reset=*/ 15);
// Display is 128 wide x 64 high.


// Compass veribles
static unsigned char Leters[] = { 'S' , 'W' , 'N' , 'E' };
int angle = 0;
int declanation = 6;


void SplashScreen(void) {
  u8g2.firstPage();
  do {
      u8g2.drawXBM( 0, 0, bike_delivery_width, bike_delivery_height, bike_delivery_bits);
      u8g2.setFont(u8g2_font_profont12_mf);
      u8g2.drawStr( 32, 59, "Nikki Speedo");
  } while ( u8g2.nextPage() );
  delay(4000);

}


void DrawCompass(int angle) {

  u8g2.drawLine(0, 3, 128, 3 );
  u8g2.drawLine(0, 24, 128, 24 );


  int start = 246 - (angle + declanation) / 3 ;
  if (start > 120) start += -120 ;

  int x = 0 ;
  int y = 20 ;
  for (int i=0; i<4; i++) {
      x = start + (i*30) -1;
      if (x>119) x += -120;
      u8g2.drawPixel(x+1, y-2);
      u8g2.drawPixel(x, y);
      u8g2.drawPixel(x+1, y);
      u8g2.drawPixel(x+2, y);
      u8g2.drawPixel(x, y-1);
      u8g2.drawPixel(x+1, y-1);
      u8g2.drawPixel(x+2, y-1);
      u8g2.setCursor((x-3),(y-16));
      u8g2.write(Leters[i]);
   }
  for (int i=0; i<24; i++) {
      x = start + (i*5) -1;
      if (x>119) x += -120;
      u8g2.drawPixel(x+1, y+1);
      u8g2.drawPixel(x, y+2);
      u8g2.drawPixel(x+1, y+2);
      u8g2.drawPixel(x+2, y+2);
      u8g2.drawPixel(x, y+3);
      u8g2.drawPixel(x+1, y+3);
      u8g2.drawPixel(x+2, y+3);
   };

  for (int i=0; i<8; i++) {
      x = start + (i*15)-1;
      if (x>119) x += -120;
      u8g2.drawPixel(x+1, y-1);
      u8g2.drawPixel(x, y);
      u8g2.drawPixel(x+1, y);
      u8g2.drawPixel(x+2, y);
      u8g2.drawPixel(x, y+1);
      u8g2.drawPixel(x+1, y+1);
      u8g2.drawPixel(x+2, y+1);

   };

   u8g2.drawTriangle(62,0, 67,0, 64,3);
   u8g2.drawTriangle(61,28, 64,24, 68,28);
   u8g2.setFont(u8g2_font_inb27_mn);

   if (gps.speed.kmph() > 1.1){
     sprintf(vartemp,"%03.0f",gps.course.deg());
    }

   u8g2.drawStr( 30, 32, vartemp);
   u8g2.setFont(u8g2_font_9x15_m_symbols);
   u8g2.drawGlyph(95, 29, 0x00b0);
}



void ScreenSetup(void) {
  u8g2.setFont(u8g2_font_9x15_m_symbols);
  u8g2.setFontRefHeightExtendedText();
  u8g2.setDrawColor(1);
  u8g2.setFontPosTop();
  u8g2.setFontDirection(0);
}


void Page1(void) {

  u8g2.drawRFrame(0, 0,128,64, 10);
  u8g2.setFont(u8g2_font_inb27_mn);
  u8g2.drawStr( 15, 10, GPSSpeed);
  u8g2.drawPixel(118, 8); //end of battery icon.
  u8g2.drawPixel(118, 9); //end of battery icon.
  u8g2.setFont(u8g2_font_unifont_t_symbols);
    if (bpercent < 10){ 
       u8g2.drawGlyph(110, 3, 0x25ad);	/* Empty box */
    } else if (bpercent > 65){  
        u8g2.drawGlyph(110, 3, 0x25ac);	/* Full Box */
    } else {
        u8g2.drawGlyph(109, 3, 0x25aa);	/* Half full */
        u8g2.drawGlyph(112, 3, 0x25ab);	/* Half empty */
        u8g2.setDrawColor(0);    /* add a couple of black pixels */
        u8g2.drawPixel(114, 8);  /* to make the battery look     */
        u8g2.drawPixel(114, 9);  /* better.                      */
        u8g2.setDrawColor(1);
    } 
  u8g2.setFont(u8g2_font_chikita_tr);
  u8g2.drawStr( 110, 15,BattPercent);
  u8g2.drawStr( 90, 32, "KM/H");
  u8g2.drawStr( 10, 53, "Trip: FIX.0 km");



  // Use pixels to draw the little arrow
  u8g2.drawPixel(11,16);
  u8g2.drawPixel(15,16);
  u8g2.drawPixel(12,16);
  u8g2.drawPixel(14,16);
  u8g2.drawPixel(14,15);
  u8g2.drawPixel(12,15);
  u8g2.drawLine(13,14, 13,19 );


  switch(strlen(gps.cardinal(gps.course.deg()))) {
    case 0:
      break;
    case 1:
      u8g2.setCursor(11, 5);
      u8g2.print(gps.cardinal(gps.course.deg()));
      break;
    case 2:
      u8g2.setCursor(8, 5);
      u8g2.print(gps.cardinal(gps.course.deg()));
      break;
    case 3:
      u8g2.setCursor(5, 5);
      u8g2.print(gps.cardinal(gps.course.deg()));
      break;

  }
}


void Page2(void) {
  sprintf(GPSTopSpeed, "%3.0f",topkph);

  u8g2.drawRFrame(0, 0,128,64, 10);
  u8g2.setFont(u8g2_font_chikita_tr);
  u8g2.drawStr( 9, 3, "Top Speed: ");
  u8g2.drawStr( 80, 23, "km/h ");
  u8g2.drawStr( 9, 33, "Total Distance:");
  u8g2.setFont(u8g2_font_inb16_mr);
  u8g2.drawStr( 35, 12, GPSTopSpeed);

}


void Page3(void) {
  DrawCompass(angle);

}


void InfoPage(void) {

  sprintf(GPSTime,"%02d:%02d:%02d",gps.time.hour()+1,gps.time.minute(),gps.time.second());
  sprintf(NumSats,"No. Sats: %2d ",gps.satellites.value());
  sprintf(GPSLocation, "%2f , %2f",gps.location.lat(), gps.location.lng());
  //Not adding "Heading:" to the string as Im using this string in the compass.
  sprintf(vartemp,"%03.0f",gps.course.deg());


  u8g2.setFont(u8g2_font_chikita_tr);
  u8g2.drawStr( 27, 0, "  Status Screen  ");
  u8g2.drawHLine(30, 8, 65);
  u8g2.drawStr( 10, 14, GPSTime);     // Display time.
  u8g2.drawStr( 10, 23, BattVolt);    // Display battery voltage.
  u8g2.drawStr( 10, 32, SDFree);      // Display freespace on SD.
  u8g2.drawStr( 10, 41, GPSLocation); // Display GPS Longitude and Latitude.
  u8g2.drawStr( 10, 50, NumSats);     // Display number of satelites.
  u8g2.drawStr( 65, 50, "Heading: ");
  u8g2.drawStr( 104, 50, vartemp);    // Display 3 digit compass heading.
}


void draw(void) {
  ScreenSetup();
  switch(Page_No) {
    case 0: Page1(); break;
    case 1: Page2(); break;
    case 2: Page3(); break;
    case 3: InfoPage(); break;

  }
}

//Calculate the free space in MB's on the SD card.
void printFreeSpace() {
  //uint32_t m = micros();
  uint32_t volFree = SD.vol()->freeClusterCount();
  float fs = 0.000512*volFree*SD.vol()->blocksPerCluster();
  sprintf(SDFree,"SD %4.0f MB free",fs);
}

void logData(){
//void logData(unsigned long lms) {
   //adam
  //unsigned long start = millis();
  //do
  //{
   //while (millis() - start < lms);
   // open the file. note that only one file can be open at a time,
    // so you have to close this one before opening another.
    myFile = SD.open("/logdata.txt", FILE_WRITE);

    // if the file opened okay, write to it:
    if (myFile) {
      Serial.print("Writing to logdata.txt...");
     // myFile.println("testing 1, 2, 3.");
      myFile.print(voltage /3.5);
      myFile.print(",");
      myFile.print(BattPercent);
      myFile.print(",");
      myFile.println(GPSTime);
     
      // close the file:
      myFile.close();
      Serial.println("done.");
    } else {
      // if the file didn't open, print an error:
      Serial.println("error opening logdata.txt");
    }
 // }
    // re-open the file for reading:
    myFile = SD.open("logdata.txt");
    if (myFile) {
      Serial.println("logdata.txt:");

      // read from the file until there's nothing else in it:
      while (myFile.available()) {
        Serial.write(myFile.read());
      }
    YYZ  // close the file:
      myFile.close();
    } else {
      // if the file didn't open, print an error:
      Serial.println("error opening logdata.txt");
      printFreeSpace();
    }
  }
 

  void PrintVoltage(){

      // take a number of analog samples and add them up
      while (sample_count < NUM_SAMPLES) {
          sum += analogRead(36);
          sample_count++;
          delay(10);
      }
      // calculate the voltage
      // use 5.0 for a 5.0V ADC reference voltage
      // 4.98V is the calibrated reference voltage
      voltage = ((float)sum / (float)NUM_SAMPLES * 5.0) / 1024.0; //5.0 was 3.93
      // send voltage for display on Serial Monitor
      // voltage multiplied by 11 when using voltage divider that
      // divides by 11. 11.132 is the calibrated voltage divide
      // value
      sample_count = 0;
      sum = 0;
      
      bpercent=map(voltage,11.08,14.30,0,100);
      //Serial.println(BattPercent);
      sprintf(BattVolt, "Battery %2.1fv",voltage / 3.5);
      sprintf(BattPercent, "%2.0f",bpercent);

      //myFile.print(voltage /3.5);
      //myFile.print(",");
     // myFile.print(BattPercent);
     // myFile.print(",");
     // myFile.println(GPSTime);

  }


static void GPSDelayCalc(unsigned long ms)
{

  unsigned long start = millis();
  do
  {
    while (Serial1.available())
      gps.encode(Serial1.read());

  } while (millis() - start < ms);
      sprintf(GPSSpeed, "%3.0f",gps.speed.kmph());
      angle = (gps.course.deg());
      if (gps.speed.kmph() >= topkph){
        topkph = gps.speed.kmph();
       }

}


void Scheduler(void){

  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    // save the last time you blinked the LED
     previousMillis = currentMillis;
     //gps.encode(Serial1.read());
     PrintVoltage();

     GPSDelayCalc(200);

     //logData();

     

    }
}


void setup(void) {

  // Open serial communications and wait for port to open:
  Serial.begin(9600);
  Serial1.begin(9600, SERIAL_8N1, 16, 17);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  //Set up the buttons and debounce inputs.
  pinMode(32,INPUT_PULLUP);		// Page Button
  pinMode(33,INPUT_PULLUP);		// Reset Button
  
  // setup pin 5 as a digital output pin
  //pinMode (ledPin, OUTPUT);
 
  bounce0.attach( 32 );
  bounce0.interval(DEBOUNCE);
  bounce1.attach( 33 );
  bounce1.interval(DEBOUNCE);

  // Initialize the SD card and check freespace.
  Serial.print("Initializing SD card...");

  if (!SD.begin(SD_CS_PIN, SD_SCK_MHZ(16))) {
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("initialization done.");
  printFreeSpace();

  Serial.println("card initialized.");

  // Initialize the display and display splash screen.
  u8g2.begin();
  SplashScreen();

}


void loop(void) {

  bounce0.update();
  bounce1.update();

  if (bounce0.fell()){
       Page_No++;
       if (Page_No ==4){
         Page_No = 0;
       }
    }

  if (bounce1.fell()){
    switch(Page_No) {
      case 0: ; break;
      case 1: topkph = 0 ; break;
      case 2: ; break;
      case 3: ; break;
     }
   }

  Scheduler();

  u8g2.firstPage();
  do {
    draw();
  } while( u8g2.nextPage() );

}
